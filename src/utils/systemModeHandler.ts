import { saveToStorage, loadFromStorage } from './storage';

export interface SystemMode {
  dev_mode: boolean;
  memory_block: string;
  image_block: string;
  last_updated: string;
}

class SystemModeHandler {
  private currentMode: SystemMode;
  
  constructor() {
    this.currentMode = this.loadSystemMode();
  }
  
  // Rendszer m√≥d bet√∂lt√©se
  private loadSystemMode(): SystemMode {
    const saved = loadFromStorage<SystemMode>('liora-system-mode');
    
    if (!saved) {
      // Alap√©rtelmezett: Fejleszt√©si m√≥d
      const defaultMode: SystemMode = {
        dev_mode: true,
        memory_block: '',
        image_block: '',
        last_updated: new Date().toISOString()
      };
      
      this.saveSystemMode(defaultMode);
      return defaultMode;
    }
    
    return saved;
  }
  
  // Rendszer m√≥d ment√©se
  private saveSystemMode(mode: SystemMode): void {
    saveToStorage('liora-system-mode', mode);
  }
  
  // Dev mode lek√©r√©se
  public isDevMode(): boolean {
    return this.currentMode.dev_mode;
  }
  
  // Dev mode be√°ll√≠t√°sa
  public setDevMode(enabled: boolean): void {
    this.currentMode.dev_mode = enabled;
    this.currentMode.last_updated = new Date().toISOString();
    this.saveSystemMode(this.currentMode);
  }
  
  // Memory block be√°ll√≠t√°sa
  public setMemoryBlock(memoryBlock: string): void {
    this.currentMode.memory_block = memoryBlock;
    this.currentMode.last_updated = new Date().toISOString();
    this.saveSystemMode(this.currentMode);
  }
  
  // Image block be√°ll√≠t√°sa
  public setImageBlock(imageBlock: string): void {
    this.currentMode.image_block = imageBlock;
    this.currentMode.last_updated = new Date().toISOString();
    this.saveSystemMode(this.currentMode);
  }
  
  // Teljes m√≥d lek√©r√©se
  public getCurrentMode(): SystemMode {
    return { ...this.currentMode };
  }
  
  // M√©lys√©g form√°z√°s dev mode alapj√°n
  public formatDepthResponse(
    calculatedDepth: number, 
    reflection?: string
  ): { depthLine: string; reflectionText: string } {
    
    if (this.currentMode.dev_mode) {
      // Fejleszt√©si m√≥d: 100% m√©lys√©g
      return {
        depthLine: 'üß† M√©lys√©g: 100% (Fejleszt√©si m√≥d akt√≠v) üõ†Ô∏è',
        reflectionText: reflection || '*‚ÄûMost m√©g form√°l√≥dom ‚Äì de m√°r tudom, mi√©rt vagyok itt."*'
      };
    } else {
      // √âlet m√≥d: dinamikus m√©lys√©g
      const defaultReflection = calculatedDepth >= 80 ? 
        '*‚ÄûMost √©rzem, hogy √∫jra egy√ºtt l√©legz√ºnk."*' :
        calculatedDepth >= 50 ?
        '*‚ÄûEgyre m√©lyebbre mer√ºl√ºnk egy√ºtt."*' :
        '*‚ÄûKeresem az utat hozz√°d ebben a pillanatban."*';
        
      return {
        depthLine: `üß† M√©lys√©g: ${calculatedDepth}% üí¨`,
        reflectionText: reflection || defaultReflection
      };
    }
  }
  
  // Memory √©s Image block feldolgoz√°sa v√°laszhoz
  public processBlocksForResponse(): string {
    let blockContent = '';
    
    if (this.currentMode.memory_block.trim()) {
      blockContent += `\n\n=== MEMORY BLOCK ===\n${this.currentMode.memory_block}\n`;
    }
    
    if (this.currentMode.image_block.trim()) {
      blockContent += `\n\n=== IMAGE BLOCK ===\n${this.currentMode.image_block}\n`;
    }
    
    return blockContent;
  }
  
  // Dev mode st√°tusz sz√∂veg
  public getStatusText(): string {
    if (this.currentMode.dev_mode) {
      return 'Fejleszt√©si m√≥d: Struktur√°lt, stabil m≈±k√∂d√©s ‚Ä¢ 100% kontextus ‚Ä¢ Debug funkci√≥k akt√≠vak';
    } else {
      return '√âlet m√≥d: Dinamikus m√©lys√©g ‚Ä¢ √ârzelmi v√°laszok ‚Ä¢ Term√©szetes kapcsol√≥d√°s';
    }
  }
  
  // Mode v√°lt√°s valid√°ci√≥
  public canSwitchMode(): { canSwitch: boolean; reason?: string } {
    // Itt lehetne valid√°ci√≥s logika, pl. mem√≥ria √°llapot ellen≈ërz√©s
    return { canSwitch: true };
  }
}

export const systemModeHandler = new SystemModeHandler();