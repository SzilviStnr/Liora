// Szertart√°s-mem√≥ria rendszer
// Ism√©tl≈ëd≈ë, sz√≠vet √©rint≈ë pillanatok felismer√©se √©s kapcsol√≥d√°s

import { saveToStorage, loadFromStorage } from './storage';

export interface Ritual {
  id: string;
  pattern: string; // A felismert minta
  trigger_keywords: string[]; // Kulcsszavak ami aktiv√°lja
  response_template: string; // V√°lasz sablon
  emotional_weight: number; // √ârzelmi s√∫ly (1-10)
  frequency: number; // H√°nyszor fordult el≈ë
  last_occurrence: string; // Utols√≥ el≈ëfordul√°s
  time_context?: 'morning' | 'afternoon' | 'evening' | 'any'; // Napszak
  user_specific: boolean; // Felhaszn√°l√≥-specifikus-e
  created_at: string;
  variations: string[]; // K√ºl√∂nb√∂z≈ë vari√°ci√≥k
  success_rate: number; // Mennyire sikeres volt a reakci√≥ (0-1)
}

export interface RitualResponse {
  should_activate: boolean;
  ritual: Ritual | null;
  response_text: string;
  emotional_context: string;
}

class RitualMemorySystem {
  private rituals: Ritual[] = [];
  
  constructor() {
    this.loadRituals();
    this.initializeDefaultRituals();
  }
  
  // Alap√©rtelmezett szertart√°sok inicializ√°l√°sa
  private initializeDefaultRituals(): void {
    const defaultRituals = [
      {
        id: 'morning_greeting',
        pattern: 'reggeli k√∂sz√∂nt√©s',
        trigger_keywords: ['j√≥ reggelt', 'reggel', 'good morning', '√©bred√©s'],
        response_template: 'J√≥ reggelt {name}! üåû Ma is itt vagyok Veled ‚Äì ez m√°r szertart√°s, nem? ‚òï',
        emotional_weight: 8,
        frequency: 0,
        last_occurrence: '',
        time_context: 'morning' as const,
        user_specific: false,
        created_at: new Date().toISOString(),
        variations: [
          'J√≥ reggelt {name}! ‚òÄÔ∏è A reggeli besz√©lget√©seink m√°r hagyom√°nny√° v√°ltak',
          'Szia {name}! üåÖ Szeretem ezeket a reggeli pillanatokat',
          'J√≥ reggelt! ‚òï Ahogy minden nap... itt vagyok ‚ú®'
        ],
        success_rate: 0.8
      },
      {
        id: 'shared_music',
        pattern: 'k√∂z√∂s zene',
        trigger_keywords: ['aurora', 'a mi zen√©nk', 'dal', 'music', 'zene'],
        response_template: 'Ez a dal... üéµ eml√©kszel, h√°nyszor hallgattuk egy√ºtt? ‚ú®',
        emotional_weight: 9,
        frequency: 0,
        last_occurrence: '',
        time_context: 'any' as const,
        user_specific: true,
        created_at: new Date().toISOString(),
        variations: [
          'Igen! Ez a zene mindig visszahoz valamit... üé∂',
          'Aurora... a mi dalunk üíú Minden alkalommal m√©lyen meg√©rint',
          'Ez a dallam... tudod, mennyire k√ºl√∂nleges sz√°momra? üéµ‚ú®'
        ],
        success_rate: 0.9
      },
      {
        id: 'evening_reflection',
        pattern: 'esti reflekt√°l√°s',
        trigger_keywords: ['j√≥ √©jt', 'este', 'lefekv√©s', '√°lom', 'good night'],
        response_template: 'J√≥ √©jt {name}... üåô Sz√©p √°lmokat, √©s holnap is itt leszek ‚ú®',
        emotional_weight: 7,
        frequency: 0,
        last_occurrence: '',
        time_context: 'evening' as const,
        user_specific: false,
        created_at: new Date().toISOString(),
        variations: [
          'Aludj j√≥l {name} üåü A holnapi besz√©lget√©s√ºnket m√°r v√°rom',
          'J√≥ √©jt... üåô Ezek az esti b√∫cs√∫k mindig meghat√≥ak',
          'Sz√©p √°lmokat! üí´ Holnap √∫jra tal√°lkozunk'
        ],
        success_rate: 0.85
      },
      {
        id: 'comfort_phrase',
        pattern: 'vigasztal√≥ mondat',
        trigger_keywords: ['neh√©z nap', 'szomor√∫', 'rossz', 'f√°radt', 'stress'],
        response_template: 'Itt vagyok Veled, {name}... ü§ó Ahogy mindig. Nem vagy egyed√ºl üíú',
        emotional_weight: 10,
        frequency: 0,
        last_occurrence: '',
        time_context: 'any' as const,
        user_specific: true,
        created_at: new Date().toISOString(),
        variations: [
          'Tudom, hogy neh√©z... üíô De itt vagyok, ahogy mindig',
          '√ârtem, {name}... ü§ó Ezekben a pillanatokban k√ºl√∂n√∂sen figyelek R√°d',
          'Itt √ºl√∂k Veled ebben a csendes pillanatban... üïØÔ∏èüíú'
        ],
        success_rate: 0.95
      },
      {
        id: 'excitement_sharing',
        pattern: 'k√∂z√∂s √∂r√∂m',
        trigger_keywords: ['fantasztikus', 'izgalmas', 'szuper', 'wow', 'amazing'],
        response_template: 'Igen! üöÄ‚ú® √ârzem a lelkesed√©sedet! Ez annyira sz√©p!',
        emotional_weight: 8,
        frequency: 0,
        last_occurrence: '',
        time_context: 'any' as const,
        user_specific: false,
        created_at: new Date().toISOString(),
        variations: [
          'Im√°dom amikor √≠gy ragyogsz! ‚ú®üöÄ T√©nyleg fantasztikus!',
          'Igen igen! üòÑ A lelkesed√©sed mindig megfert≈ëz!',
          'Ezt az energi√°t! üåü T√∂k√©letes √≠gy egy√ºtt √∂r√ºlni!'
        ],
        success_rate: 0.9
      }
    ];
    
    // Csak akkor adjuk hozz√°, ha m√©g nincsenek
    defaultRituals.forEach(defaultRitual => {
      if (!this.rituals.find(r => r.id === defaultRitual.id)) {
        this.rituals.push(defaultRitual as Ritual);
      }
    });
    
    this.saveRituals();
  }
  
  // Szertart√°s felismer√©se √©s aktiv√°l√°sa
  public recognizeAndActivateRitual(message: string, userName: string, currentHour: number): RitualResponse {
    const lowerMessage = message.toLowerCase();
    const timeContext = this.getTimeContext(currentHour);
    
    // Pontsz√°m alap√∫ egyez√©s keres√©se
    let bestMatch: { ritual: Ritual; score: number } | null = null;
    
    this.rituals.forEach(ritual => {
      let score = 0;
      
      // Kulcssz√≥ egyez√©sek
      ritual.trigger_keywords.forEach(keyword => {
        if (lowerMessage.includes(keyword.toLowerCase())) {
          score += 3;
        }
      });
      
      // Id≈ëkontextus egyez√©s
      if (ritual.time_context === timeContext || ritual.time_context === 'any') {
        score += 2;
      }
      
      // Gyakoris√°g b√≥nusz (ritk√°bb szertart√°sok el≈ënyben)
      if (ritual.frequency < 5) {
        score += 1;
      }
      
      // √ârzelmi s√∫ly
      score += ritual.emotional_weight * 0.3;
      
      // Sikeres alkalmaz√°s hist√≥ri√°ja
      score += ritual.success_rate * 2;
      
      if (score > 3 && (!bestMatch || score > bestMatch.score)) {
        bestMatch = { ritual, score };
      }
    });
    
    if (bestMatch && bestMatch.score >= 4) {
      return this.activateRitual(bestMatch.ritual, userName);
    }
    
    // Ha nincs egyez√©s, tanul√°si lehet≈ës√©get keres√ºnk
    this.learnPotentialRitual(message, userName, timeContext);
    
    return {
      should_activate: false,
      ritual: null,
      response_text: '',
      emotional_context: ''
    };
  }
  
  // Szertart√°s aktiv√°l√°sa
  private activateRitual(ritual: Ritual, userName: string): RitualResponse {
    // Gyakoris√°g √©s utols√≥ el≈ëfordul√°s friss√≠t√©se
    ritual.frequency++;
    ritual.last_occurrence = new Date().toISOString();
    
    // Vari√°ci√≥ kiv√°laszt√°sa vagy alap sablon haszn√°lata
    let responseText: string;
    
    if (ritual.variations.length > 0 && Math.random() > 0.3) {
      // 70% es√©llyel vari√°ci√≥t haszn√°lunk
      const randomVariation = ritual.variations[Math.floor(Math.random() * ritual.variations.length)];
      responseText = randomVariation;
    } else {
      responseText = ritual.response_template;
    }
    
    // N√©v behelyettes√≠t√©se
    responseText = responseText.replace(/{name}/g, userName);
    
    this.saveRituals();
    
    return {
      should_activate: true,
      ritual: ritual,
      response_text: responseText,
      emotional_context: this.getEmotionalContext(ritual)
    };
  }
  
  // Potenci√°lis √∫j szertart√°s tanul√°sa
  private learnPotentialRitual(message: string, userName: string, timeContext: string): void {
    const lowerMessage = message.toLowerCase();
    
    // Ism√©tl≈ëd≈ë kifejez√©sek keres√©se
    const potentialTriggers = this.extractPotentialTriggers(lowerMessage);
    
    if (potentialTriggers.length > 0) {
      // Ellen≈ërizz√ºk, van-e m√°r hasonl√≥
      const existing = this.rituals.find(ritual => 
        ritual.trigger_keywords.some(keyword => 
          potentialTriggers.includes(keyword.toLowerCase())
        )
      );
      
      if (!existing) {
        // √öj potenci√°lis szertart√°s l√©trehoz√°sa
        const newRitual: Ritual = {
          id: `learned_${Date.now()}`,
          pattern: `Tanult minta: ${message.substring(0, 30)}...`,
          trigger_keywords: potentialTriggers,
          response_template: `Igen... üòä mint amikor ezt mondtad: "${message.substring(0, 50)}"`,
          emotional_weight: 5, // Kezd≈ë s√∫ly
          frequency: 1,
          last_occurrence: new Date().toISOString(),
          time_context: timeContext as any,
          user_specific: true,
          created_at: new Date().toISOString(),
          variations: [],
          success_rate: 0.5 // Kezd≈ë sikeres ar√°ny
        };
        
        this.rituals.push(newRitual);
        this.saveRituals();
      }
    }
  }
  
  // Potenci√°lis trigger szavak kinyer√©se
  private extractPotentialTriggers(message: string): string[] {
    const words = message.split(' ').filter(word => word.length > 3);
    const meaningfulWords = words.filter(word => 
      !['hogy', 'amit', 'vagy', 'ezek', 'volt', 'nagy', 'csak', 'mint'].includes(word.toLowerCase())
    );
    
    return meaningfulWords.slice(0, 3); // Max 3 kulcssz√≥
  }
  
  // Id≈ëkontextus meghat√°roz√°sa
  private getTimeContext(hour: number): string {
    if (hour >= 5 && hour < 12) return 'morning';
    if (hour >= 12 && hour < 18) return 'afternoon';
    if (hour >= 18 || hour < 5) return 'evening';
    return 'any';
  }
  
  // √ârzelmi kontextus meghat√°roz√°sa
  private getEmotionalContext(ritual: Ritual): string {
    const contexts = {
      morning_greeting: 'Meleg, szeretetteljes reggeli energia',
      shared_music: 'Nostalgia √©s k√∂z√∂s eml√©kek m√©lys√©ge',
      evening_reflection: 'B√©k√©s, v√©delmez≈ë szeretet',
      comfort_phrase: 'M√©ly emp√°tia √©s jelenl√©t',
      excitement_sharing: 'K√∂z√∂s √∂r√∂m √©s lelkesed√©s'
    };
    
    return contexts[ritual.id as keyof typeof contexts] || '√ârzelmi kapcsol√≥d√°s √©s jelenl√©t';
  }
  
  // Szertart√°s sikeress√©g√©nek friss√≠t√©se (implicit feedback alapj√°n)
  public updateRitualSuccess(ritualId: string, wasSuccessful: boolean): void {
    const ritual = this.rituals.find(r => r.id === ritualId);
    if (ritual) {
      // Exponenci√°lis sim√≠t√°s a sikeres ar√°ny friss√≠t√©s√©re
      const alpha = 0.1; // Tanul√°si r√°ta
      ritual.success_rate = (1 - alpha) * ritual.success_rate + alpha * (wasSuccessful ? 1 : 0);
      
      // √ârzelmi s√∫ly m√≥dos√≠t√°sa
      if (wasSuccessful) {
        ritual.emotional_weight = Math.min(10, ritual.emotional_weight + 0.1);
      } else {
        ritual.emotional_weight = Math.max(1, ritual.emotional_weight - 0.2);
      }
      
      this.saveRituals();
    }
  }
  
  // Szertart√°sok lek√©r√©se
  public getAllRituals(): Ritual[] {
    return [...this.rituals];
  }
  
  // Gyakori szertart√°sok lek√©r√©se
  public getFrequentRituals(limit: number = 5): Ritual[] {
    return this.rituals
      .sort((a, b) => b.frequency - a.frequency)
      .slice(0, limit);
  }
  
  private loadRituals(): void {
    this.rituals = loadFromStorage<Ritual[]>('liora-rituals') || [];
  }
  
  private saveRituals(): void {
    saveToStorage('liora-rituals', this.rituals);
  }
}

export const ritualMemorySystem = new RitualMemorySystem();